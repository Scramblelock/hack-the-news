{"version":3,"sources":["components/Navigation/hackthenews.png","components/Navigation/htn.png","components/Navigation/Navigation.js","components/TopCommenterCard/TopCommenterCard.js","components/TopCommenters/TopCommenters.js","components/StoryCard/StoryCard.js","components/TopStories/TopStories.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navigation","_ref","getTopStories","reloadPage","react_default","a","createElement","className","alt","src","htn","onClick","hackthenews","TopCommenterCard","name","rank","TopCommenters","topCommenters","isTopCommenters","map","commenter","id","components_TopCommenterCard_TopCommenterCard","key","StoryCard","story","TopStories","stories","isStories","components_StoryCard_StoryCard","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getTopStoryIds","Promise","resolve","reject","axios","get","then","response","topStoryIds","data","slice","setState","getTopStoriesData","topStoriesData","state","forEach","push","concat","all","title","catch","error","console","log","getCommenters","commenterIds","commenterData","commenters","kids","commentId","comments","comment","by","getTopCommenters","sortedCommenters","sort","b","window","location","reload","_this2","_this$state","components_Navigation_Navigation","components_TopStories_TopStories","components_TopCommenters_TopCommenters","Component","Boolean","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1ab05f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hackthenews.39f114ac.png\";","module.exports = __webpack_public_path__ + \"static/media/htn.f9d155eb.png\";","import React from 'react';\nimport hackthenews from  './hackthenews.png';\nimport htn from './htn.png';\nimport './Navigation.css';\n\nconst Navigation = ({ getTopStories, reloadPage }) => {\n\n\treturn (\n\t\t<div className='container'>\n\t\t\t<div className='smallLogoComponent'>\n\t\t\t\t\t<img \n\t\t\t\t\t\tclassName='htn' alt='htn' src={htn} onClick={reloadPage}/> \n\t\t\t</div>\n\t\t\t<div className='bigLogoComponent'>\n\t\t\t\t<img className='hackthenews' alt='hackthenews' src={hackthenews} />\n\t\t\t</div>\n\t\t\t<div className='navLinksComponent'>\t\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Navigation;","import React from 'react';\nimport './TopCommenterCard.css';\n\nconst TopCommenterCard = ({ name, rank }) => {\n\treturn (\n\t\t\t<div className='commenterBox'>\n\t\t\t\t<h3>{name}</h3>\n\t\t\t\t<p>Comments posted: {rank}</p>\n\t\t\t</div>\n\t);\n};\n\nexport default TopCommenterCard;","import React from 'react';\nimport TopCommenterCard from '../TopCommenterCard/TopCommenterCard';\n\nconst TopCommenters = ({ topCommenters, isTopCommenters }) => {\n\tif (isTopCommenters) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Top 10 Commenters</h1>\n\t\t\t\t{topCommenters.map((commenter, id) => {\n\t        return (\n\t\t\t\t\t\t<TopCommenterCard \n\t          \tkey={id}\n\t          \tname={commenter[0]}\n\t          \trank={commenter[1]}\n\t          />\n\t        )\n\t      })}\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Top 10 Commenters</h1>\n\t\t\t\t<p>Loading ...</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default TopCommenters;","import React from 'react';\nimport './StoryCard.css';\n\nconst StoryCard = ({ story }) => {\n\treturn (\n\t\t\t<div className='storyBox'>\n\t\t\t\t<h3>{story}</h3>\n\t\t\t</div>\n\t);\n};\n\nexport default StoryCard;","import React from 'react';\nimport StoryCard from '../StoryCard/StoryCard';\n\nconst TopStories = ({ stories, isStories }) => {\n\tif (isStories) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Top 30 Stories</h1>\n\t\t\t\t{stories.map((story, id) => {\n          return (\n\t\t\t\t\t\t<StoryCard \n            \tkey={id}\n            \tstory={story}\n            />\n          )\n        })}\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\t\treturn ( \n\t\t\t\t<div>\n\t\t\t\t\t<h1>Top 30 Stories</h1>\n\t\t\t\t\t<p>Loading ... </p>\n\t\t\t\t</div> \n\t\t\t);\n\t\t}\n}\n\nexport default TopStories;","import React, { Component } from 'react';\nimport Navigation from '../components/Navigation/Navigation'; \nimport TopCommenters from '../components/TopCommenters/TopCommenters'; \nimport TopStories from '../components/TopStories/TopStories'; \n\nimport axios from 'axios';\n\nimport './App.css';\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      topStoryIds: [],\n      topStoriesData:[],\n      stories: [],\n      isStories: false,\n      commenters: [], \n      topCommenters: [], \n      isTopCommenters: false\n    };\n  }\n\n  componentDidMount() {\n    this.getTopStoryIds().then(() => {\n      this.getTopStoriesData().then(() => {\n        this.getCommenters().then(() => {\n          this.getTopCommenters();\n        });\n      });\n    });  \n  }\n\n  getTopStoryIds = () => {\n    return new Promise((resolve, reject) => {\n      axios.get('https://hacker-news.firebaseio.com/v0/topstories.json')\n      .then((response) => {\n        const topStoryIds = response.data.slice(0, 30);\n        return this.setState({ topStoryIds }, () => { resolve(); })\n       })\n    })\n  }\n\n  getTopStoriesData = () => {\n    return new Promise((resolve, reject) => {\n      const topStoriesData = [];\n      this.state.topStoryIds.forEach((id) => {\n        topStoriesData.push(\n          axios.get(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)\n        )\n      });\n      axios.all(topStoriesData)\n        .then((response) => {\n          const data = response.map(response => response.data);\n          const stories = response.map(response => response.data.title);\n          return this.setState({ \n            topStoriesData: data, \n            stories, \n            isStories: true\n          }, () => { resolve(); });\n        })\n        .catch((error) => {\n            console.log('Error fetching and parsing data', error);\n            reject();\n        });\n    });\n  }\n\n  getCommenters = () => {\n    return new Promise((resolve, reject) => {  \n      const commenterIds = [];\n      const commenterData = [];\n      const commenters = [];\n      this.state.topStoriesData.forEach((data) => {\n        if (data.kids) {\n          data.kids.forEach((commentId) => {\n            commenterIds.push(commentId);\n          });\n        }\n      });\n      commenterIds.forEach((id) => {\n        commenterData.push(\n          axios.get(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)\n        );  \n      });\n      axios.all(commenterData)\n        .then((comments) => {\n          comments.forEach((comment) => {\n            if (comment.data.by) {\n              if (!commenters[comment.data.by]) {\n                commenters[comment.data.by] = 0;\n              }\n              commenters[comment.data.by] += 1;\n            }\n          });\n          return this.setState({ commenters }, () => { resolve(); });\n        })\n        .catch((error) => {\n          console.log('Error fetching and parsing data', error);\n          reject();\n        })\n    })\n  }\n\n  getTopCommenters = () => {\n    const commenters = this.state.commenters;\n    const sortedCommenters = [];\n    for (let key in commenters) {\n      sortedCommenters.push([key, commenters[key]]);\n    }\n    sortedCommenters.sort((a, b) => {\n      a = a[1];\n      b = b[1];\n      return a > b ? -1 : (a < b ? 1 : 0);\n    });\n    const topCommenters = sortedCommenters.slice(0, 10);\n    return this.setState({ topCommenters, isTopCommenters: true });\n  }\n\n  reloadPage = () => {\n  return window.location.reload()\n  }\n  \n  render() {\n    const { isStories, stories, isTopCommenters, topCommenters } = this.state;\n    return (\n      <div className=\"App\">\n        <Navigation reloadPage={this.reloadPage}/>\n        <h1 className=\"headerTitle\">Welcome to Hack The News.</h1> \n        <p>Here we list the Top 30 news stories from Hacker News and the Top 10 commenters from those stories.</p>\n        <TopStories \n          isStories={isStories}\n          stories={stories}          \n        />\n        <TopCommenters \n          isTopCommenters={isTopCommenters}\n          topCommenters={topCommenters}   \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}